import { serve } from "https://deno.land/std@0.168.0/http/server.ts"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    const { prompt, style, imageData } = await req.json()

    console.log('=== AVATAR STYLING REQUEST ===')
    console.log('Style:', style)
    console.log('Has imageData:', !!imageData)
    console.log('Prompt:', prompt)

    if (!prompt || !imageData) {
      console.error('Missing required fields:', { hasPrompt: !!prompt, hasImageData: !!imageData })
      return new Response(
        JSON.stringify({ error: 'Both prompt and imageData are required for styling' }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 400 }
      )
    }

    const hfToken = Deno.env.get('HUGGING_FACE_ACCESS_TOKEN')
    if (!hfToken) {
      console.error('HUGGING_FACE_ACCESS_TOKEN not found in environment')
      return new Response(
        JSON.stringify({ error: 'Hugging Face API token not configured' }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500 }
      )
    }

    console.log('Token available:', hfToken ? 'Yes' : 'No')
    console.log('Token length:', hfToken?.length || 0)

    // Enhanced prompts for better style preservation
    const stylePrompts = {
      cyberpunk: `Transform this portrait into cyberpunk style: neon lighting, futuristic aesthetic, cyberpunk elements, but preserve the exact same person's face and features`,
      fantasy: `Transform this portrait into fantasy style: magical medieval aesthetic, fantasy elements, but keep the exact same person's face and identity`,
      artistic: `Transform this portrait into artistic painterly style: colorful art interpretation, but maintain the exact same person's face and features`,
      minimal: `Transform this portrait into minimal clean style: simple aesthetic, clean background, but preserve the exact same person's face and identity`
    }

    const enhancedPrompt = stylePrompts[style?.toLowerCase() as keyof typeof stylePrompts] || 
      `Transform this portrait into ${style} style while preserving the exact same person's face and identity`
    
    console.log('Final prompt:', enhancedPrompt)

    try {
      console.log('Starting text-to-image generation...')
      
      const response = await fetch(
        'https://api-inference.huggingface.co/models/black-forest-labs/FLUX.1-schnell',
        {
          headers: {
            Authorization: `Bearer ${hfToken}`,
            'Content-Type': 'application/json',
          },
          method: 'POST',
          body: JSON.stringify({
            inputs: enhancedPrompt,
            parameters: {
              num_inference_steps: 4,
              guidance_scale: 0.0,
            }
          }),
        }
      )
      
      console.log('Response status:', response.status)
      console.log('Response headers:', Object.fromEntries(response.headers.entries()))

      if (!response.ok) {
        const errorText = await response.text()
        console.error('API Error:', errorText)
        throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`)
      }

      const imageBuffer = await response.arrayBuffer()
      
      console.log('Image generation completed successfully!')

      if (!imageBuffer || imageBuffer.byteLength === 0) {
        console.error('No image returned from Hugging Face API')
        return new Response(
          JSON.stringify({ error: 'No image generated by AI service' }),
          { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500 }
        )
      }

      console.log('Converting result to base64...')
      const base64Result = btoa(String.fromCharCode(...new Uint8Array(imageBuffer)))

      console.log('=== SUCCESS ===')
      console.log('Generated image size:', imageBuffer.byteLength, 'bytes')
      
      return new Response(
        JSON.stringify({ image: `data:image/png;base64,${base64Result}` }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
      
    } catch (imageError) {
      console.error('=== IMAGE GENERATION ERROR ===')
      console.error('Error name:', imageError.name)
      console.error('Error message:', imageError.message)
      console.error('Full error:', imageError)

      // Provide specific error messages based on the error type
      let errorMessage = 'Image generation failed'
      let statusCode = 500

      if (imageError.message?.includes('401') || imageError.message?.includes('unauthorized')) {
        errorMessage = 'Invalid or expired Hugging Face API token. Please check your token permissions.'
        statusCode = 401
      } else if (imageError.message?.includes('429') || imageError.message?.includes('rate limit')) {
        errorMessage = 'API rate limit exceeded. Please wait and try again.'
        statusCode = 429
      } else if (imageError.message?.includes('503') || imageError.message?.includes('service unavailable')) {
        errorMessage = 'AI service temporarily unavailable. Please try again in a few moments.'
        statusCode = 503
      } else if (imageError.message?.includes('timeout')) {
        errorMessage = 'Generation timeout. Please try again with a simpler style.'
        statusCode = 408
      }

      return new Response(
        JSON.stringify({ 
          error: errorMessage,
          details: imageError.message,
          code: imageError.name
        }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: statusCode }
      )
    }

  } catch (error) {
    console.error('=== GENERAL ERROR ===')
    console.error('Error:', error)
    
    return new Response(
      JSON.stringify({ 
        error: 'Unexpected error occurred', 
        details: error.message || 'Unknown error'
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500 }
    )
  }
})